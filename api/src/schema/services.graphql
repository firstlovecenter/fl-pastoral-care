type ServiceLog @auth(rules: [{ isAuthenticated: true }]) {
  id: ID
  historyRecord: String #leader was transferred to
  created_at: TimeGraph @relationship(type: "RECORDED_ON", direction: OUT)
  loggedBy: Member @relationship(type: "LOGGED_BY", direction: OUT)
  serviceRecords: [ServiceRecord!]!
    @relationship(type: "HAS_SERVICE", direction: OUT)
  leaders: [Member!]! @relationship(type: "HAS_HISTORY", direction: IN)
  fellowship: [Fellowship!]! @relationship(type: "HAS_HISTORY", direction: IN)
  bacenta: [Bacenta!]! @relationship(type: "HAS_HISTORY", direction: IN)
  # bacentaFellowshipRecords(bacentaId: ID!): [BacentaFellowshipServiceRecords!]!
  constituency: [Constituency!]!
    @relationship(type: "HAS_HISTORY", direction: IN)
  council: [Council!]! @relationship(type: "HAS_HISTORY", direction: IN)
  sonta: [Sonta!]! @relationship(type: "HAS_HISTORY", direction: IN)
}

type ServiceDay @auth(rules: [{ isAuthenticated: true }]) {
  day: String!
  dayNumber: Int
  fellowship: Fellowship @relationship(type: "MEETS_ON", direction: IN)
}

interface Record {
  id: ID!
  created_at: DateTime!
  created_by: Member! @relationship(type: "LOGGED_BY", direction: OUT)
  attendance: Int
  markedAttendance: Boolean!
    @cypher(
      statement: """
      MATCH (this)<-[:PRESENT_AT_SERVICE|ABSENT_FROM_SERVICE]-(member:Member)
      RETURN COUNT(member) > 0 AS markedAttendance
      """
    )
  membersPresent: [Member!]!
    @relationship(type: "PRESENT_AT_SERVICE", direction: IN)
  membersAbsent: [Member!]!
    @relationship(type: "ABSENT_FROM_SERVICE", direction: IN)
}

type ServiceRecord implements Record @auth(rules: [{ isAuthenticated: true }]) {
  id: ID!
  created_at: DateTime!
  created_by: Member!
  serviceDate: TimeGraph @relationship(type: "SERVICE_HELD_ON", direction: OUT)
  week: Int
    @cypher(
      statement: """
      MATCH (this)-[:SERVICE_HELD_ON]->(date:TimeGraph)
      RETURN date(date.date).week
      """
    )
  attendance: Int

  serviceLog: ServiceLog @relationship(type: "HAS_SERVICE", direction: IN)
}

type BussingRecord implements Record @auth(rules: [{ isAuthenticated: true }]) {
  id: ID!

  week: Int
    @cypher(
      statement: """
      MATCH (this)-[:BUSSED_ON]->(date:TimeGraph)
      RETURN date(date.date).week
      """
    )
  # Mobilisation
  created_at: DateTime! #mobilisation time is the time the record was created
  serviceDate: TimeGraph! @relationship(type: "BUSSED_ON", direction: OUT)
  created_by: Member! @relationship(type: "LOGGED_BY", direction: OUT)

  #On The Way
  attendance: Int

  serviceLog: ServiceLog @relationship(type: "HAS_BUSSING", direction: IN)
}

extend type Member {
  attendedServices: [ServiceRecord!]!
    @relationship(type: "ATTENDED_SERVICE", direction: OUT)
}
